//Cell colony fixed with crystal violet, most credits go to Cedric Messaoui and Laetitia Besse (Institut Curie)  
// First macro is used to select area of interest and save it as a mask 
//Open image
open();
//Convert in 8-bit
run("8-bit");
//Ask user to select area 
setTool("oval");
waitForUser("createMask", "please draw the area to analyse");
getSelectionBounds(x, y, selwidth, selheight);
write("the dimension of the selected area are:\nwidth = "+selwidth+"\nheight= "+selheight);

//Selection center calculation   
centerX=x+(selwidth/2);
centerY=y+(selheight/2);
//write("center x = " + centerX + " center y = "+centerY);
// Shift calculating to put area center at the center of image 
shiftX=((getWidth()/2)-centerX);
shiftY=((getHeight()/2)-centerY); 
//Adjusted value calculation  
getStatistics(area, mean, min, max, std, histogram);
setBackgroundColor(mean, mean, mean);
setForegroundColor(mean, mean, mean);
//Remove components in selected area
run("Clear", "slice");
//New square size determination
newWidth=2;
while(newWidth<getWidth()) {newWidth*=2;}
newHeight=2;
while(newHeight<getHeight()) {newHeight*=2;}
//Change size to square 
run("Canvas Size...", "width="+newWidth+" height="+newHeight+" position=Center zero");
//Fills adjusted value 
floodFill(0, 0);
//Applies a shift to hidden center 
run("Translate...", "x="+shiftX+" y="+shiftY+" interpolation=Bicubic");

// The second macro is used to count colonies 
//Go to image file 
directory=getDirectory("Select a Directory");

//List all the files of directory
files=getFileList(directory);

//Dialogue to ask for parameters 
Dialog.create("Colony counting");
Dialog.addNumber("threshold alignment on mask", 1000000000 );
Dialog.addNumber("minimum size for area measurement",20);
Dialog.addNumber("Blur radius", 5 );
Dialog.addNumber("threshold detection colony", 1);
Dialog.addNumber("width of petri (pixels)", 780);
Dialog.addNumber("height of petri (pixels)", 780);
Dialog.addCheckbox("validate using area mask", true);
Dialog.addCheckbox("display all points in result window", false);
Dialog.addMessage("#########################\n\n\nNext step will ask you Mask image \n\n\n#########################");
Dialog.show();

//Takes parameters of dialogue
thresholdAli=Dialog.getNumber();
minSize=Dialog.getNumber();
blurRadius=Dialog.getNumber();
thresholdDetection=Dialog.getNumber();
widthOval=Dialog.getNumber();
heightOval=Dialog.getNumber();
validateMask=Dialog.getCheckbox();
displayPoints=Dialog.getCheckbox();

//Takes mask and aligns it  
open();
rename("mask");
newSizeX=getWidth();
newSizeY=getHeight();
nbimg=0;

//All files in loop 
for(index=0;index<files.length;index++){
	file=files[index];
	//write(file);
//Is the file an image and not a mask? 
	if( (endsWith(file,".tif") || endsWith(file,".jpg") ) && !startsWith(file, "mask")){
//Open image 
		open(directory+file);
		title=getTitle();
//Splits colors 
		selectWindow(title);
		run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
		run("Split Channels");
		titleRed=title+" (red)";
		titleBlue=title+" (blue)";
		titleGreen=title+" (green)";
//Work of blue color to center  
		selectWindow(titleBlue);	
//Converts to same size as the mask (must be to the square (FFT))
		run("Canvas Size...", "width="+newSizeX+" height="+newSizeY+" position=Center zero");
//Calculates shift with FFT
		run("FD Math...", "image1=["+titleBlue+"] operation=Correlate image2=mask result=map do");
//Finds the center of the correlation map 
		run("Find Maxima...", "noise="+thresholdAli+" output=[Point Selection]");
		getSelectionCoordinates(xpoints, ypoints);
		//write("nb points = "+xpoints.length);
		//write("1 ("+xpoints[0]+", "+ypoints[0]+")");

//Shift calculations 
		shiftX=((xpoints[0]-(newSizeX/2)));
		shiftY= ((ypoints[0]-(newSizeY/2)));
//Measure of surface working on green mask (images can be saved to compare with real image) 
		selectWindow(titleGreen);
//Put a selection area (user defined)
		makeOval((getWidth()-widthOval)/2 + shiftX, (getHeight() - heightOval)/2+shiftY, widthOval, heightOval);
		setAutoThreshold("Default");
		//run("Set Measurements...", "area center display redirect=None decimal=3");
		run("Analyze Particles...", "size="+minSize+"-Infinity  show=Masks display summarize add");

//Work on red channel
		selectWindow(titleRed);
// gaussian blur (force detection of gaussian-like colony)
		run("Gaussian Blur...", "sigma="+blurRadius);
// Area selection for detection in Petri dish only (user defined)
		makeOval((getWidth()-widthOval)/2 + shiftX, (getHeight() - heightOval)/2+shiftY, widthOval, heightOval);
//Fins all the positions by using the threshold defined by user
		run("Find Maxima...", "noise="+thresholdDetection+" output=[Point Selection] light");
		getSelectionCoordinates(xpoints, ypoints);
//Saves region of interest (roi)
		saveAs("Selection",directory+title+".roi");	
//Show results in a window  
		selectWindow("Mask of "+titleGreen);
		//run("Close-");
		countPoints=0;
		if(validateMask==1){
			for(i=0;i<xpoints.length;i++){			
				if(getPixel(xpoints[i],ypoints[i])>0){
					countPoints++;
				}			
			}
		}else{ 
			countPoints=xpoints.length;
		}
		if(displayPoints==1){
			IJ.renameResults("analyse");  
			if(nbimg!=0){
				selectWindow("maxima"); 
  				IJ.renameResults("Results");   
			}	
			currentLine= nResults;
			for(i=0;i<xpoints.length;i++){			
				setResult("image", currentLine+i, title);
				setResult("X", currentLine+i, xpoints[i]);
				setResult("Y", currentLine+i, ypoints[i]);
				if(getPixel(xpoints[i],ypoints[i])>0){					
					setResult("valid", currentLine+i, "yes");
				}else{
					setResult("valid", currentLine+i, "no");
				}			
			}
	
   			IJ.renameResults("maxima"); 
			selectWindow("analyse"); 
  			IJ.renameResults("Results"); 
		} 
		write(title + " : "+countPoints+" points validated"+" ("+xpoints.length+" detected)");
		nbimg++;
	}
}
